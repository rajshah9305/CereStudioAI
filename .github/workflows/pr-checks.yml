name: üîç Pull Request Checks

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

jobs:
  # Code Quality Checks
  code-quality:
    name: üìä Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üßπ Run Prettier Check
        run: npx prettier --check .

      - name: üîç Run ESLint
        run: npm run lint

      - name: üìè Check Bundle Size
        run: |
          npm run build
          npx bundlesize

      - name: üß™ Run Tests (if available)
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "No tests found, skipping..."
          fi

  # Dependency Analysis
  dependency-check:
    name: üì¶ Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üîç Check for Outdated Dependencies
        run: npm outdated || true

      - name: üìä Analyze Bundle
        run: |
          npm run build
          echo "Build size analysis:"
          du -sh .next/static/chunks/* | sort -hr | head -10

  # Performance Checks
  performance-check:
    name: ‚ö° Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üèóÔ∏è Build Project
        run: npm run build

      - name: ‚ö° Analyze Performance
        run: |
          echo "üìä Build Performance Metrics:"
          echo "================================"
          echo "üìÅ Total build size:"
          du -sh .next/
          echo ""
          echo "üì¶ Static assets size:"
          du -sh .next/static/
          echo ""
          echo "üîç Largest chunks:"
          find .next/static/chunks -name "*.js" -exec du -h {} + | sort -hr | head -5

  # Security Checks
  security-analysis:
    name: üõ°Ô∏è Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üõ°Ô∏è Security Audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level=moderate
          
      - name: üîí Check for Secrets
        run: |
          echo "üîç Checking for potential secrets in code..."
          if grep -r "api[_-]key\|secret\|password\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | grep -v node_modules | grep -v ".git"; then
            echo "‚ö†Ô∏è Potential secrets found in code. Please review."
            exit 1
          else
            echo "‚úÖ No obvious secrets found in code."
          fi

  # PR Summary
  pr-summary:
    name: üìã PR Summary
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-check, performance-check, security-analysis]
    if: always()
    
    steps:
      - name: üìã Generate PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'Code Quality', result: '${{ needs.code-quality.result }}' },
              { name: 'Dependency Check', result: '${{ needs.dependency-check.result }}' },
              { name: 'Performance Check', result: '${{ needs.performance-check.result }}' },
              { name: 'Security Analysis', result: '${{ needs.security-analysis.result }}' }
            ];
            
            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                default: return '‚è≥';
              }
            };
            
            const summary = jobs.map(job => 
              `${getEmoji(job.result)} **${job.name}**: ${job.result}`
            ).join('\n');
            
            const commentBody = `## üîç Pull Request Analysis Summary
            
            ${summary}
            
            ---
            
            ${jobs.every(job => job.result === 'success') 
              ? 'üéâ All checks passed! This PR is ready for review.' 
              : '‚ö†Ô∏è Some checks failed. Please review and fix the issues above.'}
            
            *Automated analysis completed at ${new Date().toISOString()}*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üîç Pull Request Analysis Summary')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
